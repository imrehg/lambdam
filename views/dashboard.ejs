<html>
<head>
<title><%= title %></title>
<link rel="stylesheet" href="/css/jquery-ui.css" type="text/css"/>
<script src="/js/libs/jquery-1.7.2.min.js"></script>
<script src="/js/libs/jquery-ui-1.8.19.custom.min.js"></script>
<script src="/js/libs/underscore.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script type="text/javascript" src="/js/libs/smoothie.js"></script>
<script type="text/javascript" src="/js/libs/jquery.sparkline.min.js"></script>
<style>
.wavetext {
  font-size: xx-large;
  font-family: monospace;
}

button{
    margin: 1px;
    padding: 0px 5px;
    border: 3px solid rgb(230, 230, 230);
}

button.enabled {
    background: #6666CC;
    color: white;
}

button.usedchannel {
    border: 3px solid red;
}

div#maincontainer {
  font-size: 1em;
  position: absolute;
  width: 100%;
  border: 1px dashed;
  top: 40px;
}

div#topbarr {
  font-size: 1em;
  position: relative;
  width: 100%;
  border: 1px dashed;
  top: 0px;
}

div#channellist {
  position: absolute;
  left:0;
  top: 0;
  border: 1px solid;
  width: 120px;
}

div#channelcontainer {
  font-size: 1em;
  border: 1px dashed;
  margin-left: 130px;
}

#sortable { 
  list-style-type: none; 
  margin: 0; 
  padding: 0px; 
  width: 100%;
}

div.chnbox {
  border: 1px dashed;
  width: 100%;
}

div.infobox {
  position: relative;
  left: 50px;
}

div.exposure {
  position: relative;
  width: 120px;
  height: 20px;
  border-radius: 9px;
  border: 1px solid;
}

.exposurebar { 
  width: 0%;
  height:18px; 
  margin: 1px 0px;  
  position:absolute;
  border-radius: 9px;
  background-color: #66cc66;
}

div.exposure h4 {
  position: relative;
  top:-40px;
}

.lowexpose {
  background-color: #6666cc;
}

.highexpose {
  background-color: #cc6666;
}

#chnlines {
  border: 1px solid;
  list-style: none;
  width: 120px;
  margin: 0px;
  position: relative;
  line-height: 2em;
  padding: 0 0;
}

.chnline {
}

.chnname {
  width: 85px;
}

.chntitle {
  font-weight: bold;
}

#windowname {
  width: 100px;
}

.topbaritem {
  font-weight: bold;
  border: 1px solid black;
  float: left;
  padding: 4px;
  width: 140px;
}

#tempfield {
  font-weight: bold;
  border: 1px solid red;
  float: left;
  padding: 4px;
}

</style>
<script>
  var channels = {};
  var savedValues = new Array(<%= channels+1 %>);
  var savedValuesPlot = new Array(<%= channels+1 %>);
  var startTime= new Array(<%= channels+1 %>);
  var socketid;
  var charts = new Array(<%= channels+1 %>);
  for (var i = 1; i < <%= channels+1 %>; i++) {
    charts[i] = new SmoothieChart();
  }
  var topupdate = new Array(<%= channels+1 %>);
  var chartwidth = (window.innerWidth > 1000) ? 800 : Math.floor(window.innerWidth - 200);

  function resizeText(element) {
     element.text('0123456789'); // 10 digit resize
     var width = $(element).width(),
     html = '<span style="white-space:nowrap"></span>',
     line = $(element).wrapInner( html ).children()[ 0 ],
     n = 300;
     $(element).css( 'font-size', n );
     while ( $(line).width() > width ) {
        $(element).css( 'font-size', --n );
     }
     $(element).text( $(line).text() );
  };

  function pad(number, length) {
    var str = '' + number;
    while (str.length < length) {
        str = '0' + str;
    }
    return str;
  };

  function dateFromUnix(timestamp) {
   // From http://stackoverflow.com/questions/847185/convert-a-unix-timestamp-to-time-in-javascript
   // create a new javascript Date object based on the timestamp
   // multiplied by 1000 so that the argument is in milliseconds, not seconds
   var date = new Date(timestamp*1000);

   var year = date.getFullYear();
   var month = pad(date.getMonth()+1, 2);
   var day = pad(date.getDate(), 2)
   var hours = pad(date.getHours(), 2);
   var minutes = pad(date.getMinutes(), 2);
   var seconds = pad(date.getSeconds(), 2);

   // will display time in 10:30:23 format
   var formattedTime = year + month + day + "-" + hours + minutes + seconds;
   return formattedTime;
  };

  function elapsedTime(time, channel) {
    var seconds = time - startTime[channel];
    if (seconds < 60) {
       out = Math.round(seconds)+'s';
    } else if (seconds < 3600) {
       var minutes = Math.floor(seconds / 60);
       var leftseconds = Math.floor(seconds) - minutes*60;
       out = minutes + ":" + pad(leftseconds, 2) + 'm';
    } else {
       var hours = Math.floor(seconds / 3600);
       var leftseconds = seconds - hours*3600;
       var minutes = Math.floor(leftseconds / 60);
       leftseconds = Math.floor(leftseconds) - minutes*60;
       out = hours + ":" + pad(minutes, 2) + ":" + pad(leftseconds, 2) + 'h';
    }
    return out;
  }

  // Take an item id and remove the base string from it
  function getNumFromId(id, idbase) {
     return id.slice(idbase.length, id.length+1);
  }

  function sendSettings(chn) {
     var t = $("#tslider"+chn).slider("value");
     var data = {num: chn, t1: t, t2: t};
     conn.emit('settings', data);
     console.log("Updated settings: "+chn);
     console.log(data);
  }

  var conn = io.connect('/channels');
  conn.on('connect', function() {
    console.log("Connected");
    socketid = this.socket.sessionid;
  });
  conn.on('message', function(msg) {
    if (msg.wavelength) {
        data = msg.wavelength;
        var channel = data['channel'],
            value = data['value'],
            time = data['timestamp'],
            exposureval = data['exposureval'],
            inter1 = data['inter1'],
            inter2 = data['inter2'];
	if (value < 0) {
	    if (value == -3) { value = "Underexp" }
	    else if (value == -4) { value = "Overexp" }
	} else {
            value = Math.round(value * Math.pow(10, 6))/Math.pow(10, 6);

            savedValues[channel].push([time, value, msg.temperature.toFixed(3)]);
            savedValuesPlot[channel].append(time*1000, value);
            if (startTime[channel] < 0) {
                startTime[channel] = time;
            }
            $("#timetext"+channel).text(elapsedTime(time, channel));

            if (exposureval) {
	        expobar(channel, Math.floor(exposureval/3000 * 100))
	    }

            $("#interfero1_"+channel).sparkline(inter1, {height: 50, width: 400});
            $("#interfero2_"+channel).sparkline(inter2, {height: 50, width: 400});
        }

        if (exposureval) {
	    expobar(channel, Math.floor(exposureval/4000 * 100))
	}
        // Show readings
        $("#wavetext"+channel).text(value);
        if (topupdate[channel]) {
	    topupdate[channel](value);
	}
    }
    if (msg.temperature) {
        displayTemp(msg.temperature);
    }
  });
  conn.on('settings', function(msg) {
    if (msg.newchannel) {
      sendSettings(msg.channel);
    } else {
      $("#tval"+msg.num).val(msg.t1);
      $("#tslider"+msg.num).slider("option", "value", msg.t1);
    }
  });
  conn.on('rooms', function(msg) {
     var rooms = msg;
     for (room in rooms) {
       var mark = ((rooms[room].length > 1) || ((rooms[room][0]) && (rooms[room][0] !== socketid))) ? true : false;
       $("#chnbtn"+room).toggleClass("usedchannel", mark);
     }
  });
  conn.on('namechange', function(msg) {
     for (chn in msg) {
        $("#chnname"+chn).val(msg[chn]);
	setNameBanner(chn, msg[chn]);
     }
  });

  function changeChannel(chn) {
     savedValues[chn] = new Array();
     savedValuesPlot[chn] = new TimeSeries();
     if (chn in channels) {
        console.log("Disabling "+chn);
        conn.emit('unsubscribe', {channel: chn});
        delete channels[chn];
        $("#chnbtn"+chn).toggleClass("enabled");
        $('div#chnbox'+chn).hide();
	delete savedValues[chn];
        $("#wavedisplay"+chn).hide();
        resizeText($( "#wavetext"+chn ));
        charts[chn].stop();
        $('#topbar'+chn).remove();
        topupdate[chn] = undefined;
     } else {
        console.log("Enabling "+chn);
        conn.emit('subscribe', {channel: chn});
        $("#chnbtn"+chn).toggleClass("enabled");
        channels[chn] = true;
        $('div#chnbox'+chn).show();
        $("#wavedisplay"+chn).show();
        resizeText($( "#wavetext"+chn ));
        startTime[chn] = -1;

	charts[chn].addTimeSeries(savedValuesPlot[chn]);
        charts[chn].start();

        $('#topbar').append('<div id="topbar'+chn+'" class="topbaritem">Ch '+chn+':</div>');
        var thistop = document.getElementById("topbar"+chn);
        topupdate[chn] = function(val) { thistop.innerHTML = "Ch "+ chn+": "+val;}

        $(".longplot").css('width', chartwidth);

     }
  }

  function expobar(chn, exposure) {
        if (exposure > 100) {
            exposure = 100;
        } else if (exposure < 0) {
            exposure = 0;
        }
        var exbar = $("#exposurebar"+chn)
        exbar.css("width", exposure+"%");
        var highex = (exposure > 80) ? true : false;
        var lowex = (exposure < 20) ? true : false;
	exbar.toggleClass("highexpose", highex)
	exbar.toggleClass("lowexpose", lowex)
  }

  function displayTemp(temp) {
        document.getElementById("tempfield").innerHTML = "T:"+parseFloat(temp).toFixed(2)+"C";
  }

  function switchplot(radio, level) {
	var id = radio.getAttribute('id');
	var chn = getNumFromId(id, "radio1_");
	console.log(chn, level);
        var times = [15, 5*60, 60*60];
        var lines = [1, 60, 5*60];
        var mpp = times[level-1] * 1000 / chartwidth;
        var mpl = lines[level-1] * 1000;
        console.log(mpp, mpl);
        charts[chn].options.millisPerPixel = mpp;
        charts[chn].options.grid.millisPerLine = mpl;
  }

  function setNameBanner(chn, name) {
      var bannername = "Channel "+chn
      if (name.length > 0) {
	  bannername += ": "+name
      }
      $("#chntitle"+chn).html(bannername);
  }

  // Things for when we are ready to manipulate the page
  $("document").ready(function() {

      $(".longplot").css('width', chartwidth);
      $(".chart").css('width', chartwidth);
      $(".chart").css('height', 150);

      $(".chnbtn").click(function() {
         var chn = getNumFromId(this.id, 'chnbtn');
         changeChannel(chn);
       });

      $( "#sortable" ).sortable();
      $( "#sortable" ).disableSelection();

      $(".chnbox").hide();

       $(".tslider").slider({
              value: 3,
              min: 1,
              max: 100,
              slide: function( event, ui ) {
                   var id = $(this).attr('id');
                   var chn = id.slice(7,id.length+1);
                   var value = ui.value;
                   $( "#tval"+chn ).val( value );
                },
              stop: function( event, ui ) {
                   var chn = getNumFromId(this.id, 'tslider');
		   sendSettings(chn);
              }
           });
       for(i=1; i <= <%= channels %>; i++) {
         $( "#tval"+i ).val( $("#tslider"+i).slider("value") );
       }
       for(i=1; i <= <%= channels %>; i++) {
         resizeText($( "#wavetext"+i ))
       }
       $(window).resize(function() {
         for(i=1; i <= <%= channels %>; i++) {
           resizeText($( "#wavetext"+i ))
         }
       });

       // download accumulated data as csv
       $(".datadown").click(function() {
          console.log("CLICK!");
          var id = $(this).attr('id');
          var chn = id.slice(8,id.length+1);
          var csv = '';
          savedValues[chn].forEach(function(e) {
             csv += e[0] + ',' + e[1] + ',' + e[2] + '\n';
          });
          var timestamp = Math.round(+new Date()/1000);
          this.download='CH'+chn+'-'+dateFromUnix(timestamp)+'.csv';
	  // var encodeddata = 'data:text/csv;base64,' + btoa(csv);
          // this.href = encodeddata;
          // Fix from here: http://html5-demos.appspot.com/static/a.download.html
          window.URL = window.webkitURL || window.URL;
          window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder ||
                       window.MozBlobBuilder;
          var bb = new BlobBuilder();
          bb.append(csv);
          this.href = window.URL.createObjectURL(bb.getBlob("text/csv"));
        });

        // Channel naming routines
        var chnname = '';
        $(".chnname").focusin(function() {
           chnname = $(this).val();
	});

        $(".chnname").focusout(function() {
           var newname = $(this).val();
           if (newname !== chnname) {
             var chn = getNumFromId($(this).attr('id'), "chnname");
             conn.emit('namechange', {channel: chn, name: newname});
             console.log("Name change:"+chn+": "+chnname+'->'+newname);
             setNameBanner(chn, newname);
           }
	});

        $( ".longplottoggle").click( function() {
             var chn = getNumFromId($(this).attr('id'), "longplottoggle");
             $("#plots"+chn).toggle('blind');
	});

        for (var i = 1; i < <%= channels+1 %>; i++) {
          charts[i].streamTo(document.getElementById("plot"+i));
          charts[i].options.fps = 40;
          charts[i].options.interpolation = 'line';
	  charts[i].options.millisPerPixel = 15 * 1000 / 800;
          charts[i].options.grid.millisPerLine = 1000;
          charts[i].stop();
	  $( "#radio"+i).buttonset();
        }
	<!-- Being able to change the time scale of the charts like that:  -->
	<!-- smoothie.options.millisPerPixel = 1000; -->
        <!-- smoothie.options.grid.millisPerLine = 60000; -->

        if (localStorage) {
           console.log(localStorage);
           $("#windowname").val(localStorage.getItem('dashboardname') || "New "+Math.floor(Math.random()*9999));
        }

        $("#windowname").focusout(function() {
	   localStorage.setItem('dashboardname', $(this).val());
	});

  });

</script>
</head>
<body>

<div id="topbar">
<div id="tempfield">T:</tempbar>
</div>

<div id="maincontainer">

<div id="channellist">
<input id="windowname" value=""/>

<span style="font-size: large;">Channels</span><br>
<ul id="chnlines">
<% for (var c = 1; c <= channels; c++) { %>
  <li class="chnline"><button class="chnbtn ui-corner-all" id="chnbtn<%= c%>"><%= c %></button><input class="chnname" id="chnname<%= c%>"/></li>
<% } %>
</ul>
</div>

<div id="channelcontainer">
<ul id="sortable">
<% for (var c = 1; c <= channels; c++) { %>
<li >
    <div class="chnbox" id="chnbox<%= c %>">
      <span id="chntitle<%= c %>" class="chntitle">Channel <%= c %></span>
      <div class="wavedisplay" id="wavedisplay<%= c %>">
      <a href="#" class="datadown" id="datadown<%= c %>">Download data</a> <span class="timetext" id="timetext<%= c %>"></span><br/>
      <input type="text" id="tval<%= c %>" style="border:0; color:#f6931f; font-weight:bold;" />
      <div class="tslider" id="tslider<%= c %>"></div>
      <div class="wavetext" id="wavetext<%= c %>">Waiting...</div>
      <div class="infobox">
       <div class="exposure"><span class="exposurebar" id="exposurebar<%= c %>"></span><h4>Exposure</h4></div>
       <div class="plots" id="plots<%= c%>">
       <div class="longplot" id="longplot<%= c %>">
	 <canvas id="plot<%= c %>" class="chart" width="800" height="150"></canvas>
         <form>
	 <div id="radio<%= c %>">
		<input type="radio" id="radio1_<%= c %>" name="radio" checked onclick="switchplot(this, 1);"/><label for="radio1_<%= c %>">15s</label>
		<input type="radio" id="radio2_<%= c %>" name="radio" onclick="switchplot(this, 2);"/><label for="radio2_<%= c %>">5m</label>
		<input type="radio" id="radio3_<%= c %>" name="radio" onclick="switchplot(this, 3);"/><label for="radio3_<%= c %>">1h</label>
	 </div>
         </form>
       </div> <!-- longplot -->
       <div class="interfero" id="interfero1_<%= c %>"></div>
       <div class="interfero" id="interfero2_<%= c %>"></div>
       </div> <!-- plots -->
       <div>
         <button class="longplottoggle ui-corner-all" id="longplottoggle<%= c%>">Show/hide chart</button
       </div>
       </div>
      </div>
      </div>
    </div>
</li >
<% } %>
</div>
</div>

</body>
</html>
