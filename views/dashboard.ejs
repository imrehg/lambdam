<html>
<head>
<title><%= title %></title>
<link rel="stylesheet" href="/css/jquery-ui.css" type="text/css"/>
<script src="/js/libs/jquery-1.7.2.min.js"></script>
<script src="/js/libs/jquery-ui-1.8.19.custom.min.js"></script>
<script src="/js/libs/underscore.js"></script>
<script src="/socket.io/socket.io.js"></script>
<style>
.wavetext {
  font-size: xx-large;
  font-family: monospace;
}

button{
    margin: 1px;
    padding: 0px 5px;
    border: 3px solid rgb(230, 230, 230);
}

button.enabled {
    background: lightblue;
}

button.usedchannel {
    border: 3px solid red;
}

div#maincontainer {
  font-size: 1em;
  position: relative;
  width: 100%;
  border: 1px dashed;
  top: 30px;
}

div#channellist {
  position: absolute;
  left:0;
  top: 0;
  border: 1px solid;
  width: 120px;
}

div#channelcontainer {
  font-size: 1em;
  border: 1px dashed;
  margin-left: 130px;
}

#sortable { 
  list-style-type: none; 
  margin: 0; 
  padding: 0px; 
  width: 100%;
}

div.chnbox {
  border: 1px dashed;
  width: 100%;
}

div.infobox {
  position: relative;
  left: 100px;
}

div.exposure {
  position: relative;
  width: 120px;
  height: 20px;
  border-radius: 9px;
  border: 1px solid;
}

.exposurebar { 
  width: 0%;
  height:18px; 
  margin: 1px 0px;  
  position:absolute;
  border-radius: 9px;
  background-color: #66cc66;
}

div.exposure h4 {
  position: relative;
  top:-40px;
}

.lowexpose {
  background-color: #6666cc;
}

.highexpose {
  background-color: #cc6666;
}

#chnlines {
  border: 1px solid;
  list-style: none;
  width: 120px;
  margin: 0px;
  position: relative;
  line-height: 2em;
  padding: 0 0;
}

.chnline {
}

.chnname {
  width: 85px;
}

.chntitle {
  font-weight: bold;
}

</style>
<script>
  var channels = {};
  var savedValues = new Array(<%= channels+1 %>);
  var startTime= new Array(<%= channels+1 %>);
  var socketid;

  function resizeText(element) {
     element.text('0123456789'); // 10 digit resize
     var width = $(element).width(),
     html = '<span style="white-space:nowrap"></span>',
     line = $(element).wrapInner( html ).children()[ 0 ],
     n = 300;
     $(element).css( 'font-size', n );
     while ( $(line).width() > width ) {
        $(element).css( 'font-size', --n );
     }
     $(element).text( $(line).text() );
  };

  function pad(number, length) {
    var str = '' + number;
    while (str.length < length) {
        str = '0' + str;
    }
    return str;
  };

  function dateFromUnix(timestamp) {
   // From http://stackoverflow.com/questions/847185/convert-a-unix-timestamp-to-time-in-javascript
   // create a new javascript Date object based on the timestamp
   // multiplied by 1000 so that the argument is in milliseconds, not seconds
   var date = new Date(timestamp*1000);

   var year = date.getFullYear();
   var month = pad(date.getMonth()+1, 2);
   var day = pad(date.getDate(), 2)
   var hours = pad(date.getHours(), 2);
   var minutes = pad(date.getMinutes(), 2);
   var seconds = pad(date.getSeconds(), 2);

   // will display time in 10:30:23 format
   var formattedTime = year + month + day + "-" + hours + minutes + seconds;
   return formattedTime;
  };

  function elapsedTime(time, channel) {
    var seconds = time - startTime[channel];
    if (seconds < 60) {
       out = Math.round(seconds)+'s';
    } else if (seconds < 3600) {
       var minutes = Math.floor(seconds / 60);
       var leftseconds = Math.floor(seconds) - minutes*60;
       out = minutes + ":" + pad(leftseconds, 2) + 'm';
    } else if (seconds > 3600) {
       var hours = Math.floor(seconds / 3600);
       var leftseconds = seconds - hours*3600;
       var minutes = Math.floor(leftseconds / 60);
       leftseconds = Math.floor(leftseconds) - minutes*60;
       out = horus + ":" + pad(minutes, 2) + ":" + pad(leftseconds, 2) + 'h';
    }
    return out;
  }

  // Take an item id and remove the base string from it
  function getNumFromId(id, idbase) {
     return id.slice(idbase.length, id.length+1);
  }

  function sendSettings(chn) {
     var t = $("#tslider"+chn).slider("value");
     var data = {num: chn, t1: t, t2: t};
     conn.emit('settings', data);
     console.log("Updated settings: "+chn);
     console.log(data);
  }

  var conn = io.connect('/channels');
  conn.on('connect', function() {
    console.log("Connected");
    socketid = this.socket.sessionid;
  });
  conn.on('message', function(msg) {
    if (msg.wavelength) {
        data = msg.wavelength;
        var channel = data['channel'],
            value = data['value'],
            time = data['timestamp'],
            exposureval = data['exposure'];
        value = Math.round(value * Math.pow(10, 6))/Math.pow(10, 6);
        $("#wavetext"+channel).text(value);
        savedValues[channel].push([time, value]);
        if (startTime[channel] < 0) {
            startTime[channel] = time;
        }
        $("#timetext"+channel).text(elapsedTime(time, channel));
	if (exposureval) {
	    exposure(channel, exposureval)
	}
    }
  });
  conn.on('settings', function(msg) {
    if (msg.newchannel) {
      sendSettings(msg.channel);
    } else {
      $("#tval"+msg.num).val(msg.t1);
      $("#tslider"+msg.num).slider("option", "value", msg.t1);
    }
  });
  conn.on('rooms', function(msg) {
     var rooms = msg;
     for (room in rooms) {
       var mark = ((rooms[room].length > 1) || ((rooms[room][0]) && (rooms[room][0] !== socketid))) ? true : false;
       $("#chnbtn"+room).toggleClass("usedchannel", mark);
     }
  });
  conn.on('namechange', function(msg) {
     for (chn in msg) {
        $("#chnname"+chn).val(msg[chn]);
	setNameBanner(chn, msg[chn]);
     }
  });

  function changeChannel(chn) {
     savedValues[chn] = new Array();
     if (chn in channels) {
        console.log("Disabling "+chn);
        conn.emit('unsubscribe', {channel: chn});
        delete channels[chn];
        $("#chnbtn"+chn).toggleClass("enabled");
        $('div#chnbox'+chn).hide();
	delete savedValues[chn];
        $("#wavedisplay"+chn).hide();
        resizeText($( "#wavetext"+chn ));
     } else {
        console.log("Enabling "+chn);
        conn.emit('subscribe', {channel: chn});
        $("#chnbtn"+chn).toggleClass("enabled");
        channels[chn] = true;
        $('div#chnbox'+chn).show();
        $("#wavedisplay"+chn).show();
        resizeText($( "#wavetext"+chn ));
        startTime[chn] = -1;
     }
  }

  function expobar(chn, exposure) {
        var exbar = $("#exposurebar"+chn)
        exbar.css("width", exposure+"%");
        var highex = (exposure > 80) ? true : false;
        var lowex = (exposure < 20) ? true : false;
	console.log(lowex);
	exbar.toggleClass("highexpose", highex)
	exbar.toggleClass("lowexpose", lowex)
  }

  function setNameBanner(chn, name) {
      var bannername = "Channel "+chn
      if (name.length > 0) {
	  bannername += ": "+name
      }
      $("#chntitle"+chn).html(bannername);
  }

  // Things for when we are ready to manipulate the page
  $("document").ready(function() {

      $(".chnbtn").click(function() {
         var chn = getNumFromId(this.id, 'chnbtn');
         changeChannel(chn);
       });

      $( "#sortable" ).sortable();
      $( "#sortable" ).disableSelection();

      $(".chnbox").hide();

       $(".tslider").slider({
              value: 3,
              min: 1,
              max: 100,
              slide: function( event, ui ) {
                   var id = $(this).attr('id');
                   var chn = id.slice(7,id.length+1);
                   var value = ui.value;
                   $( "#tval"+chn ).val( value );
                },
              stop: function( event, ui ) {
                   var chn = getNumFromId(this.id, 'tslider');
		   sendSettings(chn);
              }
           });
       for(i=1; i <= <%= channels %>; i++) {
         $( "#tval"+i ).val( $("#tslider"+i).slider("value") );
       }
       for(i=1; i <= <%= channels %>; i++) {
         resizeText($( "#wavetext"+i ))
       }
       $(window).resize(function() {
         for(i=1; i <= <%= channels %>; i++) {
           resizeText($( "#wavetext"+i ))
         }
       });

       // download accumulated data as csv
       $(".datadown").click(function() {
          console.log("CLICK!");
          var id = $(this).attr('id');
          var chn = id.slice(8,id.length+1);
          var csv = '';
          savedValues[chn].forEach(function(e) {
             csv += e[0] + ',' + e[1] + '\n';
          });
          var timestamp = Math.round(+new Date()/1000);
          this.download='CH'+chn+'-'+dateFromUnix(timestamp)+'.csv';
	  // var encodeddata = 'data:text/csv;base64,' + btoa(csv);
          // this.href = encodeddata;
          // Fix from here: http://html5-demos.appspot.com/static/a.download.html
          window.URL = window.webkitURL || window.URL;
          window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder ||
                       window.MozBlobBuilder;
          var bb = new BlobBuilder();
          bb.append(csv);
          this.href = window.URL.createObjectURL(bb.getBlob("text/csv"));
        });

        // Channel naming routines
        var chnname = '';
        $(".chnname").focusin(function() {
           chnname = $(this).val();
	});

        $(".chnname").focusout(function() {
           var newname = $(this).val();
           if (newname !== chnname) {
             var chn = getNumFromId($(this).attr('id'), "chnname");
             conn.emit('namechange', {channel: chn, name: newname});
             console.log("Name change:"+chn+": "+chnname+'->'+newname);
             setNameBanner(chn, newname);
           }
	});
  });

</script>
</head>
<body>

<div id="maincontainer">

<div id="channellist">
<span style="font-size: large;">Channels</span><br>
<ul id="chnlines">
<% for (var c = 1; c <= channels; c++) { %>
  <li class="chnline"><button class="chnbtn ui-corner-all" id="chnbtn<%= c%>"><%= c %></button><input class="chnname" id="chnname<%= c%>"/></li>
<% } %>
</ul>
</div>

<div id="channelcontainer">
<ul id="sortable">
<% for (var c = 1; c <= channels; c++) { %>
<li >
    <div class="chnbox" id="chnbox<%= c %>">
      <span id="chntitle<%= c %>" class="chntitle">Channel <%= c %></span>
      <div class="wavedisplay" id="wavedisplay<%= c %>">
      <a href="#" class="datadown" id="datadown<%= c %>">Download data</a> <span class="timetext" id="timetext<%= c %>"></span><br/>
      <input type="text" id="tval<%= c %>" style="border:0; color:#f6931f; font-weight:bold;" />
      <div class="tslider" id="tslider<%= c %>"></div>
      <div class="wavetext" id="wavetext<%= c %>">Waiting...</div>
      <div class="infobox">
       <div class="exposure"><span class="exposurebar" id="exposurebar<%= c %>"></span><h4>Exposure</h4></div>
      </div>
      </div>
    </div>
</li >
<% } %>
</div>
</div>

</body>
</html>
